// <auto-generated />
using System;
using EfCoreConventionProblem;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfCoreConventionProblem.Migrations
{
    [DbContext(typeof(TestDbContext))]
    partial class TestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EfCoreConventionProblem.MainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("MainEntities");
                });

            modelBuilder.Entity("EfCoreConventionProblem.OtherEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("OtherEntities");
                });

            modelBuilder.Entity("EfCoreConventionProblem.MainEntity", b =>
                {
                    b.OwnsOne("EfCoreConventionProblem.OwnedEntity", "OwnedEntity", b1 =>
                        {
                            b1.Property<Guid>("MainEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("MainEntityId");

                            b1.ToTable("MainEntities");

                            b1.WithOwner()
                                .HasForeignKey("MainEntityId");

                            b1.OwnsMany("EfCoreConventionProblem.SecondLevelOwnedEntity", "SecondLevelOwnedEntities", b2 =>
                                {
                                    b2.Property<Guid>("OwnedEntityMainEntityId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"), 1L, 1);

                                    b2.Property<decimal>("Number")
                                        .HasPrecision(16, 2)
                                        .HasColumnType("decimal(16,2)");

                                    b2.HasKey("OwnedEntityMainEntityId", "Id");

                                    b2.ToTable("MainEntities_SecondLevelOwnedEntities");

                                    b2.WithOwner()
                                        .HasForeignKey("OwnedEntityMainEntityId");
                                });

                            b1.Navigation("SecondLevelOwnedEntities");
                        });

                    b.Navigation("OwnedEntity")
                        .IsRequired();
                });

            modelBuilder.Entity("EfCoreConventionProblem.OtherEntity", b =>
                {
                    b.OwnsOne("EfCoreConventionProblem.SecondLevelOwnedEntity", "SecondLevelOwnedEntity", b1 =>
                        {
                            b1.Property<Guid>("OtherEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Number")
                                .HasPrecision(16, 4)
                                .HasColumnType("decimal(16,4)");

                            b1.HasKey("OtherEntityId");

                            b1.ToTable("OtherEntities");

                            b1.WithOwner()
                                .HasForeignKey("OtherEntityId");
                        });

                    b.Navigation("SecondLevelOwnedEntity")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
